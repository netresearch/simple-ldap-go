name: Optimized Test Suite

on:
  push:
    branches: [ main, develop, 'feature/*' ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Fast unit tests that run on every commit
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.23', '1.24', '1.25']

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run fast unit tests
      run: make test-fast
      timeout-minutes: 5

    - name: Upload unit test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-results-${{ matrix.go-version }}
        path: |
          coverage.out
          test-results.xml

  # Integration tests with optimized Docker container management
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    strategy:
      matrix:
        go-version: ['1.23', '1.24', '1.25']

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Start Docker services
      run: |
        sudo systemctl start docker
        docker info

    - name: Run optimized integration tests
      run: make test-integration-parallel
      timeout-minutes: 10
      env:
        CI: true

    - name: Upload integration test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results-${{ matrix.go-version }}
        path: |
          coverage.out
          test-results.xml

  # Performance and benchmark tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: '1.25'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

    - name: Download dependencies
      run: go mod download

    - name: Run benchmark tests
      run: make test-benchmark
      timeout-minutes: 10

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: |
          benchmark-results.txt
          cpu.prof
          mem.prof

  # Quality assurance checks
  quality-checks:
    name: Quality Assurance
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: '1.25'

    - name: Install golangci-lint
      uses: golangci/golangci-lint-action@v8
      with:
        version: v1.62.2
        args: --timeout=10m

    - name: Run quality checks
      run: make qa
      timeout-minutes: 12

    - name: Check test optimizations
      run: |
        # Verify test files use optimized patterns
        echo "Checking for test optimization patterns..."

        # Check for shared container usage
        if grep -r "SetupTestContainer" . --include="*_test.go" | grep -v optimized; then
          echo "⚠️  Found tests not using optimized container setup"
          grep -r "SetupTestContainer" . --include="*_test.go" | grep -v optimized
        fi

        # Check for parallel test usage
        parallel_tests=$(grep -r "t\.Parallel()" . --include="*_test.go" | wc -l)
        echo "✅ Found $parallel_tests tests using parallel execution"

        # Check for timeout optimizations
        if grep -r "testing\.Short()" . --include="*_test.go"; then
          echo "✅ Found tests with short mode support"
        fi

  # Coverage report generation
  coverage:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: '1.25'

    - name: Download dependencies
      run: go mod download

    - name: Generate coverage report
      run: make test-coverage
      timeout-minutes: 12

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

    - name: Upload coverage results
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: |
          coverage.out
          coverage.html

  # Full test suite for releases
  full-test-suite:
    name: Full Test Suite
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    strategy:
      matrix:
        go-version: ['1.23', '1.24', '1.25']
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: ${{ matrix.go-version }}

    - name: Download dependencies
      run: go mod download

    - name: Run comprehensive test suite
      run: make test-comprehensive
      timeout-minutes: 15

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: full-test-results-${{ matrix.os }}-go${{ matrix.go-version }}
        path: |
          coverage.out
          test-results.xml

# Environment variables for all jobs
env:
  GO111MODULE: on
  CGO_ENABLED: 1  # Required for race detection
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1